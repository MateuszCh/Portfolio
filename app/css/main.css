/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}template,[hidden]{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}pre,code,kbd,samp{font-family:monospace, monospace;font-size:1em}dfn{font-style:italic}h1{font-size:2em;margin:.75em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}svg:not(:root){overflow:hidden}figure{margin:1.5em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,optgroup,select,textarea{font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html [type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button}button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText}input{overflow:visible}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto}[type="search"]{-webkit-appearance:textfield;outline-offset:-2px}[type="search"]::-webkit-search-cancel-button,[type="search"]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{box-sizing:border-box;display:table;max-width:100%;white-space:normal;color:inherit;padding:0}optgroup{font-weight:bold}textarea{overflow:auto}*{margin:0;padding:0;box-sizing:border-box}body{background-color:#237474;font-family:"Oswald",sans-serif;color:white}a{color:inherit;text-decoration:none}main{width:90%;margin:0 auto}@media only screen and (min-width: 768px){main{width:70%}}@media only screen and (min-width: 1200px){main{width:60%}}h2{text-align:center;font-size:2rem;padding:2rem}ul{list-style-type:none}ul li{text-align:center}.tabs{min-height:100vh}p{line-height:1.70rem;font-size:1rem;margin:0.625rem 0}@media only screen and (min-width: 768px){p{font-size:1rem}}.mainSection{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;padding-top:20vh;padding-bottom:5vh}.mainSection h1{text-align:center;margin:0;font-size:3.5rem}@media only screen and (min-width: 768px){.mainSection h1{font-size:6rem;width:50%;margin:0 auto}}.mainSection h2{font-family:"Caveat",cursive;-webkit-box-flex:1;flex-grow:1;padding:0}@media only screen and (min-width: 768px){.mainSection ul{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}}@media only screen and (min-width: 1200px){.mainSection ul{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}}.mainSection ul li{padding:.15rem;text-align:center}.mainSection ul li:nth-of-type(3){text-decoration:underline}@media only screen and (min-width: 768px){.mainSection ul li{font-size:1.25rem;text-align:left;padding:0 .25rem}}@media only screen and (min-width: 1200px){.mainSection ul li{text-align:center;-webkit-box-flex:0;flex-grow:0;width:33%}}@media only screen and (min-width: 1200px){.mainSection ul li a{text-decoration:none;display:inline-block;position:relative;padding-bottom:3px}.mainSection ul li a:after{content:'';display:block;margin:auto;height:2px;width:0;background:transparent;-webkit-transition:width .5s ease, background-color .5s ease;transition:width .5s ease, background-color .5s ease}.mainSection ul li a:hover:after{width:100%;background:white}}.portfolio ul{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-align:center;align-items:center;padding-bottom:2rem}@media only screen and (min-width: 768px){.portfolio ul{display:-webkit-box;display:flex;flex-wrap:wrap;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center}}.portfolio ul li{margin:.5rem 0;display:inline-block}@media only screen and (min-width: 1200px){.portfolio ul li{width:50%;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center}}.portfolio ul li:nth-child(1) a{background-color:#ff6c84}.portfolio ul li:nth-child(2) a{background-color:#0c877a}.portfolio ul li:nth-child(3) a{background-color:#B7004E}.portfolio ul li:nth-child(4) a{background-color:#28293E}.portfolio ul li a{padding:.5rem;display:block}@media only screen and (min-width: 1200px){.portfolio ul li a{max-width:25rem}}.portfolio ul li a figure{width:100%;max-width:20rem;margin:0 auto;position:relative}@media only screen and (min-width: 1200px){.portfolio ul li a figure{max-width:25rem}}.portfolio ul li a figure img{display:block;width:100%}.portfolio ul li a figure figcaption{position:absolute;width:100%;bottom:0;padding:.5rem;background-color:white;color:#237474;font-weight:300}.about ul{padding-bottom:1rem;display:-webkit-box;display:flex;justify-content:space-around;flex-wrap:wrap}.about ul li{padding:.25rem}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
